{"version":3,"sources":["static/images/zodiac-signs/aries.png","static/images/zodiac-signs/taurus.png","static/images/zodiac-signs/gemini.png","static/images/zodiac-signs/cancer.png","static/images/zodiac-signs/leo.png","static/images/zodiac-signs/virgo.png","static/images/zodiac-signs/libra.png","static/images/zodiac-signs/scorpio.png","static/images/zodiac-signs/sagittarius.png","static/images/zodiac-signs/capricorn.png","static/images/zodiac-signs/aquarius.png","static/images/zodiac-signs/pisces.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","zodiacSigns","Capricorn","capricorn","Aquarius","aquarius","Pisces","pisces","Aries","aries","Taurus","taurus","Gemini","gemini","Cancer","cancer","Leo","leo","Virgo","virgo","Libra","libra","Scorpio","scorpio","Sagittarius","sagittarius","Object","freeze","App","state","sign","date","get_zodiac_sign","_ref","month","parseInt","substr","day","date_changed","event","_this","setState","target","value","_this2","this","react_default","a","createElement","className","type","onChange","src","alt","style","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8aCiBlCC,SAAc,CAClBC,UAAWC,IACXC,SAAUC,IACVC,OAAQC,IACRC,MAAOC,IACPC,OAAQC,IACRC,OAAQC,IACRC,OAAQC,IACRC,IAAKC,IACLC,MAAOC,IACPC,MAAOC,IACPC,QAASC,IACTC,YAAaC,MAEfC,OAAOC,OAAO1B,OAkFC2B,6MA/EbC,MAAQ,CACNC,KAAM,GACNC,KAAM,gBAGRC,gBAAkB,SAAAC,GAAc,IAAXF,EAAWE,EAAXF,KACfG,EAAQC,SAASJ,EAAKK,OAAO,EAAG,IAChCC,EAAMF,SAASJ,EAAKK,OAAO,EAAG,IAElC,OAAe,IAAVF,GAAeG,GAAO,IAAkB,KAAVH,GAAgBG,GAAO,GACjD,YACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,WACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,SACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,QACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,SACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,SACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,SACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,MACW,IAAVH,GAAeG,GAAO,IAAkB,IAAVH,GAAeG,GAAO,GACrD,QACW,IAAVH,GAAeG,GAAO,IAAkB,KAAVH,GAAgBG,GAAO,GACtD,QACW,KAAVH,GAAgBG,GAAO,IAAkB,KAAVH,GAAgBG,GAAO,GACvD,UACW,KAAVH,GAAgBG,GAAO,IAAkB,KAAVH,GAAgBG,GAAO,GACvD,mBADJ,KAIPC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZV,KAAMQ,EAAMG,OAAOC,MACnBb,KAAMU,EAAKR,gBAAgB,CAAED,KAAMQ,EAAMG,OAAOC,mFAI3C,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLP,MAAOE,KAAKhB,MAAME,KAClBoB,SAAU,SAAAZ,GAAK,OAAIK,EAAKN,aAAaC,SAK5CM,KAAKhB,MAAMC,KACVgB,EAAAC,EAAAC,cAAA,OACEI,IAAKnD,EAAY4C,KAAKhB,MAAMC,MAC5BmB,UAAU,WACVI,IAAI,OACJC,MAAO,CAAEC,OAAQ,UAEjB,KACiB,eAApBV,KAAKhB,MAAME,KAAwB,KAClCe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BAAsBH,KAAKhB,MAAME,MACjCe,EAAAC,EAAAC,cAAA,kCAA0BH,KAAKhB,MAAMC,KAArC,gBAvEI0B,aCvBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42de1a02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aries.07429835.png\";","module.exports = __webpack_public_path__ + \"static/media/taurus.244ae94a.png\";","module.exports = __webpack_public_path__ + \"static/media/gemini.895cef05.png\";","module.exports = __webpack_public_path__ + \"static/media/cancer.f0bc8d6b.png\";","module.exports = __webpack_public_path__ + \"static/media/leo.a6a45bbc.png\";","module.exports = __webpack_public_path__ + \"static/media/virgo.767fa5ef.png\";","module.exports = __webpack_public_path__ + \"static/media/libra.146412f8.png\";","module.exports = __webpack_public_path__ + \"static/media/scorpio.1780b21e.png\";","module.exports = __webpack_public_path__ + \"static/media/sagittarius.d3c0c100.png\";","module.exports = __webpack_public_path__ + \"static/media/capricorn.541f7ce9.png\";","module.exports = __webpack_public_path__ + \"static/media/aquarius.e6739948.png\";","module.exports = __webpack_public_path__ + \"static/media/pisces.dbc3fae6.png\";","import React, { Component } from \"react\";\n\nimport aries from \"./static/images/zodiac-signs/aries.png\";\nimport taurus from \"./static/images/zodiac-signs/taurus.png\";\nimport gemini from \"./static/images/zodiac-signs/gemini.png\";\nimport cancer from \"./static/images/zodiac-signs/cancer.png\";\nimport leo from \"./static/images/zodiac-signs/leo.png\";\nimport virgo from \"./static/images/zodiac-signs/virgo.png\";\nimport libra from \"./static/images/zodiac-signs/libra.png\";\nimport scorpio from \"./static/images/zodiac-signs/scorpio.png\";\nimport sagittarius from \"./static/images/zodiac-signs/sagittarius.png\";\nimport capricorn from \"./static/images/zodiac-signs/capricorn.png\";\nimport aquarius from \"./static/images/zodiac-signs/aquarius.png\";\nimport pisces from \"./static/images/zodiac-signs/pisces.png\";\n\nimport \"./App.css\";\n\nconst zodiacSigns = {\n  Capricorn: capricorn,\n  Aquarius: aquarius,\n  Pisces: pisces,\n  Aries: aries,\n  Taurus: taurus,\n  Gemini: gemini,\n  Cancer: cancer,\n  Leo: leo,\n  Virgo: virgo,\n  Libra: libra,\n  Scorpio: scorpio,\n  Sagittarius: sagittarius\n};\nObject.freeze(zodiacSigns);\n\nclass App extends Component {\n  state = {\n    sign: \"\",\n    date: \"0000-00-00\"\n  };\n\n  get_zodiac_sign = ({ date }) => {\n    var month = parseInt(date.substr(5, 2));\n    var day = parseInt(date.substr(8, 2));\n\n    if ((month === 1 && day <= 20) || (month === 12 && day >= 22))\n      return \"Capricorn\";\n    else if ((month === 1 && day >= 21) || (month === 2 && day <= 18))\n      return \"Aquarius\";\n    else if ((month === 2 && day >= 19) || (month === 3 && day <= 20))\n      return \"Pisces\";\n    else if ((month === 3 && day >= 21) || (month === 4 && day <= 20))\n      return \"Aries\";\n    else if ((month === 4 && day >= 21) || (month === 5 && day <= 20))\n      return \"Taurus\";\n    else if ((month === 5 && day >= 21) || (month === 6 && day <= 20))\n      return \"Gemini\";\n    else if ((month === 6 && day >= 22) || (month === 7 && day <= 22))\n      return \"Cancer\";\n    else if ((month === 7 && day >= 23) || (month === 8 && day <= 23))\n      return \"Leo\";\n    else if ((month === 8 && day >= 24) || (month === 9 && day <= 23))\n      return \"Virgo\";\n    else if ((month === 9 && day >= 24) || (month === 10 && day <= 23))\n      return \"Libra\";\n    else if ((month === 10 && day >= 24) || (month === 11 && day <= 22))\n      return \"Scorpio\";\n    else if ((month === 11 && day >= 23) || (month === 12 && day <= 21))\n      return \"Sagittarius\";\n  };\n\n  date_changed = event => {\n    this.setState({\n      date: event.target.value,\n      sign: this.get_zodiac_sign({ date: event.target.value })\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Find your zodiac sign !!</h1>\n          <div className=\"Birthday-div\">\n            <form>\n              <label>Birthday: </label>\n              <div>\n                <input\n                  type=\"date\"\n                  value={this.state.date}\n                  onChange={event => this.date_changed(event)}\n                />\n              </div>\n            </form>\n          </div>\n          {this.state.sign ? (\n            <img\n              src={zodiacSigns[this.state.sign]}\n              className=\"App-logo\"\n              alt=\"logo\"\n              style={{ margin: \"30px\" }}\n            />\n          ) : null}\n          {this.state.date === \"0000-00-00\" ? null : (\n            <div>\n              <h1>Your birthday is {this.state.date}</h1>\n              <h1> Your zodiac sign is {this.state.sign} !</h1>\n            </div>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}